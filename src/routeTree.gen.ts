/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PublicAboutImport } from './routes/_public/about'
import { Route as DashboardViewsImport } from './routes/_dashboard/views'
import { Route as DashboardProfileImport } from './routes/_dashboard/profile'
import { Route as DashboardHomeImport } from './routes/_dashboard/home'
import { Route as DashboardCustomersImport } from './routes/_dashboard/customers'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLogoutImport } from './routes/(auth)/logout'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicAboutRoute = PublicAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)

const DashboardViewsRoute = DashboardViewsImport.update({
  id: '/views',
  path: '/views',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardProfileRoute = DashboardProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardHomeRoute = DashboardHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCustomersRoute = DashboardCustomersImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => DashboardRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLogoutRoute = authLogoutImport.update({
  id: '/(auth)/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/logout': {
      id: '/(auth)/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authLogoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/customers': {
      id: '/_dashboard/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof DashboardCustomersImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/home': {
      id: '/_dashboard/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof DashboardHomeImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/profile': {
      id: '/_dashboard/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof DashboardProfileImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/views': {
      id: '/_dashboard/views'
      path: '/views'
      fullPath: '/views'
      preLoaderRoute: typeof DashboardViewsImport
      parentRoute: typeof DashboardImport
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutImport
      parentRoute: typeof PublicImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardCustomersRoute: typeof DashboardCustomersRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardViewsRoute: typeof DashboardViewsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardCustomersRoute: DashboardCustomersRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardViewsRoute: DashboardViewsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface PublicRouteChildren {
  PublicAboutRoute: typeof PublicAboutRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutRoute: PublicAboutRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/signup': typeof authSignupRoute
  '/customers': typeof DashboardCustomersRoute
  '/home': typeof DashboardHomeRoute
  '/profile': typeof DashboardProfileRoute
  '/views': typeof DashboardViewsRoute
  '/about': typeof PublicAboutRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesByTo {
  '': typeof DashboardRouteWithChildren
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/signup': typeof authSignupRoute
  '/customers': typeof DashboardCustomersRoute
  '/home': typeof DashboardHomeRoute
  '/profile': typeof DashboardProfileRoute
  '/views': typeof DashboardViewsRoute
  '/about': typeof PublicAboutRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/logout': typeof authLogoutRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_dashboard/customers': typeof DashboardCustomersRoute
  '/_dashboard/home': typeof DashboardHomeRoute
  '/_dashboard/profile': typeof DashboardProfileRoute
  '/_dashboard/views': typeof DashboardViewsRoute
  '/_public/about': typeof PublicAboutRoute
  '/_public/': typeof PublicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/customers'
    | '/home'
    | '/profile'
    | '/views'
    | '/about'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/customers'
    | '/home'
    | '/profile'
    | '/views'
    | '/about'
    | '/'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_public'
    | '/(auth)/login'
    | '/(auth)/logout'
    | '/(auth)/signup'
    | '/_dashboard/customers'
    | '/_dashboard/home'
    | '/_dashboard/profile'
    | '/_dashboard/views'
    | '/_public/about'
    | '/_public/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authLogoutRoute: typeof authLogoutRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authLogoutRoute: authLogoutRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/_public",
        "/(auth)/login",
        "/(auth)/logout",
        "/(auth)/signup"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/customers",
        "/_dashboard/home",
        "/_dashboard/profile",
        "/_dashboard/views"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/about",
        "/_public/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/logout": {
      "filePath": "(auth)/logout.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/_dashboard/customers": {
      "filePath": "_dashboard/customers.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/home": {
      "filePath": "_dashboard/home.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/profile": {
      "filePath": "_dashboard/profile.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/views": {
      "filePath": "_dashboard/views.tsx",
      "parent": "/_dashboard"
    },
    "/_public/about": {
      "filePath": "_public/about.tsx",
      "parent": "/_public"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
